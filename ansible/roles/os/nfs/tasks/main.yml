---
- name: Install and configure NFS on master node
  block:
    - name: Install required packages
      ansible.builtin.apt:
        name: "nfs-kernel-server"
        state: present
        update_cache: true

    - name: Mount device from fstab
      ansible.posix.mount:
        path: "{{ item.mount }}"
        src: "{{ item.device }}"
        fstype: "{{ item.fstype }}"
        state: present
      loop: "{{ nfs_devices }}"

    - name: Configure NFS server
      ansible.builtin.lineinfile:
        regexp: "^{{ item.mount }}"
        path: /etc/exports
        state: present
        line: "{{ item.mount }} *(rw,no_root_squash,insecure,async,no_subtree_check,anonuid=1000,anongid=1000)"
      loop: "{{ nfs_devices }}"

    - name: Export nfs config
      ansible.builtin.command: /usr/sbin/exportfs -ra

    - name: Start nfs-kernel-server
      ansible.builtin.systemd:
        name: nfs-kernel-server.service
        enabled: true
        state: started
      failed_when: false

    - name: Create applications config folders
      ansible.builtin.file:
        path: "{{ media.applications.mount }}/{{ item }}"
        state: directory
        mode: '0777'
      loop: "{{ media.applications.folders }}"

    - name: Create data folders
      ansible.builtin.file:
        path: "{{ media.persistence.mount }}/{{ item }}"
        state: directory
        mode: '0777'
      loop: "{{ media.persistence.folders }}"
  when:
    - k3s_control_node is defined
    - k3s_control_node

- name: Mount NFS on workers fstab
  block:
    - name: Install required packages
      ansible.builtin.apt:
        name: "nfs-common"
        state: present
        update_cache: true

    - name: Configure NFSv4 IDMAPD
      ansible.builtin.lineinfile:
        regexp: "^{{ item.reg }}"
        line: "{{ item.value }}"
        path: /etc/default/nfs-common
      loop:
        - { reg: "NEED_IDMAPD", value: "NEED_IDMAPD=yes" }
        - { reg: "NEED_GSSD", value: "NEED_GSSD=no" }

    - name: Mount nfs device to auto.nfs
      ansible.builtin.lineinfile:
        path: "/etc/auto.nfs"
        line: "{{ item.name }} -fstype={{ item.fstype }} {{ item.host }}:{{ item.mount }}"
        create: true
      loop: "{{ nfs_devices }}"

    - name: Mount nfs with auto.master
      ansible.builtin.lineinfile:
        path: "/etc/auto.master"
        line: "/mnt/nfs /etc/auto.nfs"
        create: true

    - name: Restart autofs
      ansible.builtin.systemd:
        name: autofs.service
        enabled: true
        state: restarted
      failed_when: false
  when:
    - k3s_control_node is defined
    - k3s_control_node is false
